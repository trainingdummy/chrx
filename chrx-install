#!/bin/bash
#
# chrx-install
#
# Chromebook Unix Installer
#

CHRX_VERSION="4.0.4"

# Default configuration
CHRX_DEFAULT_ROOTFS_URL="https://tinyurl.com/chrx-zorin-17"
CHRX_ROOTFS_URL=""
CHRX_ROOTFS_SIZE_GB=""
CHRX_TARGET_DISK=""
CHRX_HOSTNAME="chrx"
CHRX_USERNAME="chrx"
CHRX_LOCALE="en_US.UTF-8"
CHRX_TZ="America/New_York"
CHRX_ROOT_PASSWORD=""

CHRX_CACHE_DIR="/var/cache/chrx"
CHRX_INSTALL_ROOT="/tmp/chrxroot"

VERBOSITY=""
VERBOSITY_CURL="-#"
VERBOSITY_INSTALL=""

CHRX_PROMPT_ENABLED=1
CHRX_NOTIFY_ENABLED=1
CHRX_MODE=""

# Color codes
ANSI_RED=$'\033[1;31m'
ANSI_YEL=$'\033[1;33m'
ANSI_GRN=$'\033[1;32m'
ANSI_VIO=$'\033[1;35m'
ANSI_BLU=$'\033[1;36m'
ANSI_WHT=$'\033[1;37m'
ANSI_RST=$'\033[0m'

echo_cmd()    { echo -e "${ANSI_BLU}${@}${ANSI_RST}"; }
echo_note()   { echo -e "${ANSI_YEL}${@}${ANSI_RST}"; }
echo_info()   { echo -e "${ANSI_GRN}${@}${ANSI_RST}"; }
echo_prompt() { echo -e "${ANSI_WHT}${@}${ANSI_RST}"; }
echo_warn()   { echo -e "${ANSI_YEL}${@}${ANSI_RST}"; }
echo_debug()  { echo -e "${ANSI_VIO}${@}${ANSI_RST}"; }
echo_fail()   { echo -e "${ANSI_RED}${@}${ANSI_RST}"; }

eval_try()
{
  local _cmd=$@
  [ "$VERBOSE" ] && echo_cmd "$_cmd"
  eval $_cmd
}

eval_crit()
{
  local _cmd=$@
  [ "$VERBOSE" ] && echo_cmd "$_cmd"
  eval $_cmd
  rc=$?

  if [ "$rc" -ne 0 ]; then
    echo_fail "fatal: return code ${rc} from command \"${_cmd}\""
    exit $rc
  fi
}

prompt_if_interactive()
{
  PROMPT_RESPONSE=
  if [ "${CHRX_PROMPT_ENABLED}" ]; then
    read -e PROMPT_RESPONSE
  else
    echo
  fi
}

downcase() { echo "$@" | tr '[:upper:]' '[:lower:]'; }

detect_mode()
{
  # Check if partition 7 exists on the root device
  local rootdev=$(rootdev -d -s 2>/dev/null)
  
  if [ -z "$rootdev" ]; then
    # Not on ChromeOS, try to detect anyway
    if [ -b /dev/mmcblk0 ]; then
      rootdev="/dev/mmcblk0"
    elif [ -b /dev/nvme0n1 ]; then
      rootdev="/dev/nvme0n1"
    elif [ -b /dev/sda ]; then
      rootdev="/dev/sda"
    else
      echo_fail "Unable to detect storage device"
      exit 1
    fi
  fi
  
  # Determine partition naming scheme
  if [[ "${rootdev}" =~ "mmcblk" ]] || [[ "${rootdev}" =~ "nvme" ]]; then
    local part7="${rootdev}p7"
  else
    local part7="${rootdev}7"
  fi
  
  if [ -b "$part7" ]; then
    CHRX_MODE="install"
  else
    CHRX_MODE="partition"
  fi
}

show_welcome_banner()
{
  cat <<- EOBANNER
${ANSI_GRN}
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║        chrx - Generic Chromebook Linux Installer              ║
║                    Version ${CHRX_VERSION}                    ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
${ANSI_RST}

EOBANNER
}

show_partition_mode_menu()
{
  cat <<- EOMENU

${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}
${ANSI_YEL}                    PARTITION MODE                             ${ANSI_RST}
${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}

This is your first time running chrx. We need to create a partition
for Linux before we can install anything.

${ANSI_RED}WARNING: This will modify your disk partitions!${ANSI_RST}
${ANSI_YEL}Make sure you have backups of any important data.${ANSI_RST}

EOMENU

  echo_prompt "How much space do you want for Linux? (in GB)"
  echo_note "Recommended: 16-32 GB for most distros, 64+ GB for desktop use"
  echo_prompt "Enter size in GB [default: 16]: \c"
  
  prompt_if_interactive
  CHRX_ROOTFS_SIZE_GB=${PROMPT_RESPONSE:-16}
  
  # Validate input
  if ! [[ "$CHRX_ROOTFS_SIZE_GB" =~ ^[0-9]+$ ]]; then
    echo_fail "Invalid size. Please enter a number."
    exit 1
  fi
  
  if [ "$CHRX_ROOTFS_SIZE_GB" -lt 8 ]; then
    echo_fail "Size too small. Minimum 8 GB required."
    exit 1
  fi
  
  echo
  echo_info "Partition size: ${CHRX_ROOTFS_SIZE_GB} GB"
  echo
  echo_warn "Press [ENTER] to confirm and continue or CTRL+C to abort: \c"
  prompt_if_interactive
}

show_install_mode_menu()
{
  cat <<- EOMENU

${ANSI_GRN}═══════════════════════════════════════════════════════════════${ANSI_RST}
${ANSI_GRN}                    INSTALLATION MODE                          ${ANSI_RST}
${ANSI_GRN}═══════════════════════════════════════════════════════════════${ANSI_RST}

Partition detected! Ready to install Linux.

EOMENU

  echo_prompt "Enter the URL to your Linux rootfs tar.gz file:"
  echo_note "Press [ENTER] for default: ${CHRX_DEFAULT_ROOTFS_URL}"
  echo_prompt "URL: \c"
  
  prompt_if_interactive
  CHRX_ROOTFS_URL=${PROMPT_RESPONSE:-$CHRX_DEFAULT_ROOTFS_URL}
  
  echo
  echo_info "Download URL: ${CHRX_ROOTFS_URL}"
  echo
  
  echo_prompt "Hostname [default: chrx]: \c"
  prompt_if_interactive
  CHRX_HOSTNAME=${PROMPT_RESPONSE:-chrx}
  
  echo_prompt "Username [default: chrx]: \c"
  prompt_if_interactive
  CHRX_USERNAME=${PROMPT_RESPONSE:-chrx}
  
  echo_prompt "Timezone [default: America/New_York]: \c"
  prompt_if_interactive
  CHRX_TZ=${PROMPT_RESPONSE:-America/New_York}
  
  echo_prompt "Locale [default: en_US.UTF-8]: \c"
  prompt_if_interactive
  CHRX_LOCALE=${PROMPT_RESPONSE:-en_US.UTF-8}
  
  echo
  echo_prompt "Enter root password: "
  read -s CHRX_ROOT_PASSWORD
  echo
  echo_prompt "Confirm root password: "
  read -s CHRX_ROOT_PASSWORD_CONFIRM
  echo
  
  if [ "${CHRX_ROOT_PASSWORD}" != "${CHRX_ROOT_PASSWORD_CONFIRM}" ]; then
    echo_fail "Passwords do not match!"
    exit 1
  fi
  
  if [ -z "${CHRX_ROOT_PASSWORD}" ]; then
    echo_fail "Password cannot be empty!"
    exit 1
  fi
}

validate_url()
{
  echo_info "\nValidating download URL..."
  
  # Follow redirects and check if URL is accessible
  local response=$(curl -s -I -L -w "%{http_code}" "${CHRX_ROOTFS_URL}" -o /dev/null)
  
  if [ "$response" != "200" ]; then
    echo_fail "Unable to access URL: ${CHRX_ROOTFS_URL}"
    echo_fail "HTTP response code: ${response}"
    exit 1
  fi
  
  echo_info "URL is accessible."
}

setup_storage_partition_mode()
{
  echo_info "\n${ANSI_GRN}Creating Linux partition...${ANSI_RST}"
  
  # Determine target disk
  CHRX_TARGET_DISK=$(rootdev -d -s 2>/dev/null)
  
  if [ -z "${CHRX_TARGET_DISK}" ]; then
    if [ -b /dev/mmcblk0 ]; then
      CHRX_TARGET_DISK="/dev/mmcblk0"
    elif [ -b /dev/nvme0n1 ]; then
      CHRX_TARGET_DISK="/dev/nvme0n1"
    elif [ -b /dev/sda ]; then
      CHRX_TARGET_DISK="/dev/sda"
    else
      echo_fail "Unable to detect internal storage device"
      exit 1
    fi
  fi
  
  echo_info "Target disk: ${CHRX_TARGET_DISK}"
  
  # Determine partition naming scheme
  if [[ "${CHRX_TARGET_DISK}" =~ "mmcblk" ]] || [[ "${CHRX_TARGET_DISK}" =~ "nvme" ]]; then
    CHRX_ROOT_PARTITION="${CHRX_TARGET_DISK}p7"
  else
    CHRX_ROOT_PARTITION="${CHRX_TARGET_DISK}7"
  fi
  
  echo_info "Creating partition: ${CHRX_ROOT_PARTITION}"
  echo_info "Size: ${CHRX_ROOTFS_SIZE_GB} GB"
  
  # Get the start of the largest free space
  local free_space_start=$(parted -s ${CHRX_TARGET_DISK} unit s print free 2>/dev/null | grep "Free Space" | tail -1 | awk '{print $1}' | sed 's/s//')
  
  if [ -z "${free_space_start}" ]; then
    echo_fail "No free space available for installation"
    exit 1
  fi
  
  local partition_end=$((${free_space_start} + (${CHRX_ROOTFS_SIZE_GB} * 1024 * 1024 * 2)))
  
  echo_info "Creating partition from sector ${free_space_start} to ${partition_end}..."
  
  eval_crit "parted -s ${CHRX_TARGET_DISK} unit s mkpart primary ${free_space_start} ${partition_end}"
  
  # Mark as kernel partition for ChromeOS compatibility
  if command -v cgpt >/dev/null 2>&1; then
    eval_crit "cgpt add -i 7 -t kernel -P 5 -T 1 -S 1 ${CHRX_TARGET_DISK}"
  fi
  
  # Wait for partition to appear
  sleep 2
  partprobe ${CHRX_TARGET_DISK} 2>/dev/null
  sleep 2
  
  echo_info "Formatting ${CHRX_ROOT_PARTITION} as ext4..."
  eval_crit "mkfs.ext4 -F -L CHRX-ROOT ${CHRX_ROOT_PARTITION}"
  
  cat <<- EOMSG

${ANSI_GRN}═══════════════════════════════════════════════════════════════${ANSI_RST}
${ANSI_GRN}              Partitioning Complete!                           ${ANSI_RST}
${ANSI_GRN}═══════════════════════════════════════════════════════════════${ANSI_RST}

Partition ${CHRX_ROOT_PARTITION} has been created and formatted.

${ANSI_YEL}IMPORTANT: Run this installer again to install Linux!${ANSI_RST}

Run the same command:
  ${ANSI_WHT}curl -L https://tinyurl.com/td-chrx | sudo tar xzfC - /usr/local && chrx${ANSI_RST}

EOMSG
}

setup_storage_install_mode()
{
  echo_info "\n${ANSI_GRN}Preparing installation...${ANSI_RST}"
  
  # Determine target disk and partition
  CHRX_TARGET_DISK=$(rootdev -d -s 2>/dev/null)
  
  if [ -z "${CHRX_TARGET_DISK}" ]; then
    if [ -b /dev/mmcblk0 ]; then
      CHRX_TARGET_DISK="/dev/mmcblk0"
    elif [ -b /dev/nvme0n1 ]; then
      CHRX_TARGET_DISK="/dev/nvme0n1"
    elif [ -b /dev/sda ]; then
      CHRX_TARGET_DISK="/dev/sda"
    else
      echo_fail "Unable to detect internal storage device"
      exit 1
    fi
  fi
  
  # Determine partition naming scheme
  if [[ "${CHRX_TARGET_DISK}" =~ "mmcblk" ]] || [[ "${CHRX_TARGET_DISK}" =~ "nvme" ]]; then
    CHRX_ROOT_PARTITION="${CHRX_TARGET_DISK}p7"
  else
    CHRX_ROOT_PARTITION="${CHRX_TARGET_DISK}7"
  fi
  
  if [ ! -b "${CHRX_ROOT_PARTITION}" ]; then
    echo_fail "Partition ${CHRX_ROOT_PARTITION} not found!"
    echo_fail "Please run chrx in partition mode first."
    exit 1
  fi
  
  echo_info "Target partition: ${CHRX_ROOT_PARTITION}"
  
  # Mount the partition
  mkdir -p ${CHRX_INSTALL_ROOT}
  eval_crit "mount ${CHRX_ROOT_PARTITION} ${CHRX_INSTALL_ROOT}"
  
  echo_info "Partition mounted at ${CHRX_INSTALL_ROOT}"
}

do_install()
{
  start_date=$(date)
  start_secs=$(date +%s)

  echo_info "\n${ANSI_GRN}Downloading and extracting rootfs...${ANSI_RST}"
  echo_info "This may take several minutes depending on file size."
  echo

  # Download and extract in one pass
  curl -L ${VERBOSITY_CURL} "${CHRX_ROOTFS_URL}" | tar xzp -C ${CHRX_INSTALL_ROOT}
  
  if [ ${PIPESTATUS[0]} -ne 0 ] || [ ${PIPESTATUS[1]} -ne 0 ]; then
    echo_fail "Fatal: unable to download and extract rootfs archive."
    exit 1
  fi
  
  echo_info "Rootfs extracted successfully!"

  # Mount necessary filesystems
  echo_info "Setting up chroot environment..."
  eval_crit "mount -o bind /proc    ${CHRX_INSTALL_ROOT}/proc"
  eval_crit "mount -o bind /dev     ${CHRX_INSTALL_ROOT}/dev"
  eval_crit "mount -o bind /dev/pts ${CHRX_INSTALL_ROOT}/dev/pts"
  eval_crit "mount -o bind /sys     ${CHRX_INSTALL_ROOT}/sys"
  eval_crit "mount -o bind /run     ${CHRX_INSTALL_ROOT}/run"

  # Copy cgpt if available
  if [ -f /usr/bin/old_bins/cgpt ]; then
    mkdir -p ${CHRX_INSTALL_ROOT}/usr/bin
    cp /usr/bin/old_bins/cgpt ${CHRX_INSTALL_ROOT}/usr/bin/
    chmod a+rx ${CHRX_INSTALL_ROOT}/usr/bin/cgpt
  elif [ -f /usr/bin/cgpt ]; then
    mkdir -p ${CHRX_INSTALL_ROOT}/usr/bin
    cp /usr/bin/cgpt ${CHRX_INSTALL_ROOT}/usr/bin/
    chmod a+rx ${CHRX_INSTALL_ROOT}/usr/bin/cgpt
  fi

  # Setup networking
  mkdir -p ${CHRX_INSTALL_ROOT}/run/resolvconf
  mkdir -p ${CHRX_INSTALL_ROOT}/run/systemd/resolve
  cat /etc/resolv.conf > ${CHRX_INSTALL_ROOT}/etc/resolv.conf 2>/dev/null || true

  # Configure hostname
  echo_info "Configuring system..."
  echo ${CHRX_HOSTNAME} > ${CHRX_INSTALL_ROOT}/etc/hostname
  
  if [ -f ${CHRX_INSTALL_ROOT}/etc/hosts ]; then
    echo -e "\n127.0.1.1       ${CHRX_HOSTNAME}" >> ${CHRX_INSTALL_ROOT}/etc/hosts
  else
    cat > ${CHRX_INSTALL_ROOT}/etc/hosts <<EOF
127.0.0.1       localhost
127.0.1.1       ${CHRX_HOSTNAME}
::1             localhost ip6-localhost ip6-loopback
EOF
  fi

  # Configure fstab
  cat > ${CHRX_INSTALL_ROOT}/etc/fstab <<EOF
# /etc/fstab: static file system information
${CHRX_ROOT_PARTITION}  /          ext4    defaults,relatime  0  1
proc                    /proc      proc    defaults           0  0
sysfs                   /sys       sysfs   defaults           0  0
devpts                  /dev/pts   devpts  defaults           0  0
tmpfs                   /tmp       tmpfs   defaults           0  0
EOF

  # Set timezone
  if [ -f ${CHRX_INSTALL_ROOT}/usr/share/zoneinfo/${CHRX_TZ} ]; then
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "ln -sf /usr/share/zoneinfo/${CHRX_TZ} /etc/localtime" 2>/dev/null || true
  fi

  # Set locale
  if [ -f ${CHRX_INSTALL_ROOT}/usr/sbin/locale-gen ]; then
    echo "${CHRX_LOCALE} UTF-8" > ${CHRX_INSTALL_ROOT}/etc/locale.gen
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "locale-gen" 2>/dev/null || true
  fi
  if [ -f ${CHRX_INSTALL_ROOT}/etc/locale.conf ] || [ -d ${CHRX_INSTALL_ROOT}/etc ]; then
    echo "LANG=${CHRX_LOCALE}" > ${CHRX_INSTALL_ROOT}/etc/locale.conf
  fi

  # Create user
  if [ -f ${CHRX_INSTALL_ROOT}/usr/sbin/useradd ]; then
    echo_info "Creating user: ${CHRX_USERNAME}"
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "useradd -m -s /bin/bash ${CHRX_USERNAME}" 2>/dev/null || true
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "echo '${CHRX_USERNAME}:${CHRX_USERNAME}' | chpasswd" 2>/dev/null || true
    
    # Add to groups
    for group in wheel sudo audio video users netdev plugdev; do
      if grep -q "^${group}:" ${CHRX_INSTALL_ROOT}/etc/group 2>/dev/null; then
        chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "usermod -aG ${group} ${CHRX_USERNAME}" 2>/dev/null || true
      fi
    done
  fi

  # Set root password
  if [ -n "${CHRX_ROOT_PASSWORD}" ]; then
    echo_info "Setting root password..."
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "echo 'root:${CHRX_ROOT_PASSWORD}' | chpasswd" 2>/dev/null || true
  fi

  # Install and configure GRUB
  echo_info "Installing GRUB bootloader..."
  install_grub

  # Enable legacy boot
  if command -v crossystem >/dev/null 2>&1; then
    crossystem dev_boot_legacy=1 2>/dev/null || true
  fi

  # Cleanup
  echo_info "Cleaning up..."
  sync
  umount ${CHRX_INSTALL_ROOT}/proc 2>/dev/null || true
  umount ${CHRX_INSTALL_ROOT}/dev/pts 2>/dev/null || true
  umount ${CHRX_INSTALL_ROOT}/dev 2>/dev/null || true
  umount ${CHRX_INSTALL_ROOT}/sys 2>/dev/null || true
  umount ${CHRX_INSTALL_ROOT}/run 2>/dev/null || true
  umount ${CHRX_INSTALL_ROOT} 2>/dev/null || true

  finish_date=$(date)
  finish_secs=$(date +%s)
  elapsed_time=$(( (${finish_secs}-${start_secs})/60 ))m$(( (${finish_secs}-${start_secs})%60 ))s

  show_completion_banner
}

install_grub()
{
  # Check if grub is available in the rootfs
  if [ ! -f ${CHRX_INSTALL_ROOT}/usr/sbin/grub-install ] && [ ! -f ${CHRX_INSTALL_ROOT}/sbin/grub-install ]; then
    echo_warn "GRUB not found in rootfs. You'll need to install it manually."
    return
  fi

  # Install GRUB to MBR
  echo_info "Installing GRUB to ${CHRX_TARGET_DISK}..."
  
  chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "grub-install --boot-directory=/boot ${CHRX_TARGET_DISK} --force" 2>/dev/null || {
    echo_warn "GRUB installation failed. You may need to install it manually."
    return
  }

  # Generate GRUB config
  if [ -f ${CHRX_INSTALL_ROOT}/usr/sbin/grub-mkconfig ]; then
    echo_info "Generating GRUB configuration..."
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg" 2>/dev/null || {
      echo_warn "GRUB config generation failed. You may need to configure it manually."
    }
  elif [ -f ${CHRX_INSTALL_ROOT}/usr/sbin/update-grub ]; then
    chroot ${CHRX_INSTALL_ROOT} /bin/bash -c "update-grub" 2>/dev/null || {
      echo_warn "GRUB config generation failed. You may need to configure it manually."
    }
  fi
  
  echo_info "GRUB installation complete."
}

show_completion_banner()
{
  cat <<- EOMSG

${ANSI_GRN}
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║              Installation Complete!                           ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
${ANSI_RST}

     Started:  ${start_date}
    Finished:  ${finish_date}
     Elapsed:  ${elapsed_time}

${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}

After reboot, at the white "OS verification is OFF" screen:

  ${ANSI_YEL}Press CTRL-D${ANSI_RST} to boot ChromeOS
  ${ANSI_GRN}Press CTRL-L${ANSI_RST} to boot your new Linux installation

${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}

Default login credentials:

  Username: ${ANSI_WHT}${CHRX_USERNAME}${ANSI_RST}
  Password: ${ANSI_WHT}${CHRX_USERNAME}${ANSI_RST}

${ANSI_RED}IMPORTANT: Change your password after first login!${ANSI_RST}

${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}

Note: Some distributions may require additional configuration:
  - Network setup
  - Graphics drivers
  - Additional firmware

${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}

EOMSG
}

parse_opts()
{
  while getopts ":u:s:t:H:U:P:L:Z:yvh" OPTION
  do
    case "$OPTION" in
      u) CHRX_ROOTFS_URL=$OPTARG ;;
      s) CHRX_ROOTFS_SIZE_GB=$OPTARG ;;
      t) CHRX_TARGET_DISK=$OPTARG ;;
      H) CHRX_HOSTNAME=$OPTARG ;;
      U) CHRX_USERNAME=$OPTARG ;;
      P) CHRX_ROOT_PASSWORD=$OPTARG ;;
      L) CHRX_LOCALE=$OPTARG ;;
      Z) CHRX_TZ=$OPTARG ;;
      y) CHRX_PROMPT_ENABLED= ;;
      v) VERBOSITY="v"
         VERBOSITY_CURL=""
         VERBOSITY_INSTALL="-v"
         ;;
      h) 
        cat <<- EOHELP
chrx installer, version ${CHRX_VERSION}

Usage: chrx [ option ... ]

Options:
  -u URL          Direct download URL to tar.gz rootfs (install mode only)
  -s SIZE         Size in GB for Linux partition (partition mode only)
  -t TARGETDISK   Target disk (/dev/mmcblk1, /dev/sdb, etc)
  -H HOSTNAME     Hostname for new system
  -U USERNAME     Username of first user
  -P PASSWORD     Root password
  -L LOCALE       Locale for new system
  -Z TIMEZONE     Timezone (e.g., America/New_York)
  -y              Non-interactive mode
  -v              Verbose output
  -h              Show this help

The installer runs in two modes:
  1. First run: Creates partition (or use -s to specify size)
  2. Second run: Installs Linux (or use -u to specify URL)

Default rootfs: ${CHRX_DEFAULT_ROOTFS_URL}

EOHELP
        exit 0
        ;;
      '?')
         [ "$OPTARG" = "?" ] && exit 0
         echo_fail "Unrecognized option: '-${OPTARG}'" ; exit 1 ;;
    esac
  done
}

main()
{
  parse_opts "$@"
  
  show_welcome_banner
  
  # Detect which mode to run in
  detect_mode
  
  if [ "$CHRX_MODE" = "partition" ]; then
    # Mode 1: Partitioning
    if [ -z "$CHRX_ROOTFS_SIZE_GB" ]; then
      show_partition_mode_menu
    fi
    setup_storage_partition_mode
  else
    # Mode 2: Installation
    if [ -z "$CHRX_ROOTFS_URL" ]; then
      show_install_mode_menu
    fi
    
    # Validate URL
    validate_url
    
    # Setup storage
    setup_storage_install_mode
    
    # Confirm before installing
    cat <<- EOCONFIRM

${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}
                    Installation Summary
${ANSI_YEL}═══════════════════════════════════════════════════════════════${ANSI_RST}

  Download URL: ${CHRX_ROOTFS_URL}
  Target disk:  ${CHRX_TARGET_DISK}
  Partition:    ${CHRX_ROOT_PARTITION}
  Hostname:     ${CHRX_HOSTNAME}
  Username:     ${CHRX_USERNAME}
  Timezone:     ${CHRX_TZ}
  Locale:       ${CHRX_LOCALE}

${ANSI_RED}This will erase any existing data on ${CHRX_ROOT_PARTITION}!${ANSI_RST}

EOCONFIRM

    echo_warn "Press [ENTER] to continue or CTRL+C to abort: \c"
    prompt_if_interactive
    
    # Perform installation
    do_install
    
    # Prompt for reboot
    echo_note "\nPress [ENTER] to reboot: \c"
    prompt_if_interactive
    
    if [ -z "$CHRX_NO_REBOOT" ]; then
      reboot
      sleep 10
    fi
  fi
}

main "$@"
